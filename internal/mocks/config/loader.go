// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Loader is an autogenerated mock type for the Loader type
type Loader[T interface{}] struct {
	mock.Mock
}

// Load provides a mock function with given fields: configData
func (_m *Loader[T]) Load(configData []byte) (T, error) {
	ret := _m.Called(configData)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (T, error)); ok {
		return rf(configData)
	}
	if rf, ok := ret.Get(0).(func([]byte) T); ok {
		r0 = rf(configData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(configData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoader creates a new instance of Loader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoader[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Loader[T] {
	mock := &Loader[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
