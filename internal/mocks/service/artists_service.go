// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ArtistsService is an autogenerated mock type for the ArtistsService type
type ArtistsService struct {
	mock.Mock
}

// GetArtist provides a mock function with given fields: artistID
func (_m *ArtistsService) GetArtist(artistID string) (model.Artist, error) {
	ret := _m.Called(artistID)

	if len(ret) == 0 {
		panic("no return value specified for GetArtist")
	}

	var r0 model.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Artist, error)); ok {
		return rf(artistID)
	}
	if rf, ok := ret.Get(0).(func(string) model.Artist); ok {
		r0 = rf(artistID)
	} else {
		r0 = ret.Get(0).(model.Artist)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtistAlbums provides a mock function with given fields: countryMarketName, albumTypes, limit, offset, albumID
func (_m *ArtistsService) GetArtistAlbums(countryMarketName *string, albumTypes *[]string, limit *int, offset *int, albumID string) (model.SimplifiedArtistAlbumsPaginated, error) {
	ret := _m.Called(countryMarketName, albumTypes, limit, offset, albumID)

	if len(ret) == 0 {
		panic("no return value specified for GetArtistAlbums")
	}

	var r0 model.SimplifiedArtistAlbumsPaginated
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *[]string, *int, *int, string) (model.SimplifiedArtistAlbumsPaginated, error)); ok {
		return rf(countryMarketName, albumTypes, limit, offset, albumID)
	}
	if rf, ok := ret.Get(0).(func(*string, *[]string, *int, *int, string) model.SimplifiedArtistAlbumsPaginated); ok {
		r0 = rf(countryMarketName, albumTypes, limit, offset, albumID)
	} else {
		r0 = ret.Get(0).(model.SimplifiedArtistAlbumsPaginated)
	}

	if rf, ok := ret.Get(1).(func(*string, *[]string, *int, *int, string) error); ok {
		r1 = rf(countryMarketName, albumTypes, limit, offset, albumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtistTopTracks provides a mock function with given fields: countryMarketName, artistID
func (_m *ArtistsService) GetArtistTopTracks(countryMarketName *string, artistID string) ([]model.Track, error) {
	ret := _m.Called(countryMarketName, artistID)

	if len(ret) == 0 {
		panic("no return value specified for GetArtistTopTracks")
	}

	var r0 []model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, string) ([]model.Track, error)); ok {
		return rf(countryMarketName, artistID)
	}
	if rf, ok := ret.Get(0).(func(*string, string) []model.Track); ok {
		r0 = rf(countryMarketName, artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, string) error); ok {
		r1 = rf(countryMarketName, artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtists provides a mock function with given fields: artistIDsStr
func (_m *ArtistsService) GetArtists(artistIDsStr ...string) ([]model.Artist, error) {
	_va := make([]interface{}, len(artistIDsStr))
	for _i := range artistIDsStr {
		_va[_i] = artistIDsStr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArtists")
	}

	var r0 []model.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]model.Artist, error)); ok {
		return rf(artistIDsStr...)
	}
	if rf, ok := ret.Get(0).(func(...string) []model.Artist); ok {
		r0 = rf(artistIDsStr...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(artistIDsStr...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArtistsService creates a new instance of ArtistsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtistsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtistsService {
	mock := &ArtistsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
