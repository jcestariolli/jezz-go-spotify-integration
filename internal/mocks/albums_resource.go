// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// AlbumsResource is an autogenerated mock type for the AlbumsResource type
type AlbumsResource struct {
	mock.Mock
}

// GetAlbum provides a mock function with given fields: accessToken, market, albumID
func (_m *AlbumsResource) GetAlbum(accessToken model.AccessToken, market *model.AvailableMarket, albumID model.ID) (model.Album, error) {
	ret := _m.Called(accessToken, market, albumID)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbum")
	}

	var r0 model.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.ID) (model.Album, error)); ok {
		return rf(accessToken, market, albumID)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.ID) model.Album); ok {
		r0 = rf(accessToken, market, albumID)
	} else {
		r0 = ret.Get(0).(model.Album)
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.AvailableMarket, model.ID) error); ok {
		r1 = rf(accessToken, market, albumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbumTracks provides a mock function with given fields: accessToken, market, limit, offset, albumID
func (_m *AlbumsResource) GetAlbumTracks(accessToken model.AccessToken, market *model.AvailableMarket, limit *model.Limit, offset *model.Offset, albumID model.ID) (model.SimplifiedTracksPaginated, error) {
	ret := _m.Called(accessToken, market, limit, offset, albumID)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumTracks")
	}

	var r0 model.SimplifiedTracksPaginated
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, *model.Limit, *model.Offset, model.ID) (model.SimplifiedTracksPaginated, error)); ok {
		return rf(accessToken, market, limit, offset, albumID)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, *model.Limit, *model.Offset, model.ID) model.SimplifiedTracksPaginated); ok {
		r0 = rf(accessToken, market, limit, offset, albumID)
	} else {
		r0 = ret.Get(0).(model.SimplifiedTracksPaginated)
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.AvailableMarket, *model.Limit, *model.Offset, model.ID) error); ok {
		r1 = rf(accessToken, market, limit, offset, albumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbums provides a mock function with given fields: accessToken, market, albumsIDs
func (_m *AlbumsResource) GetAlbums(accessToken model.AccessToken, market *model.AvailableMarket, albumsIDs model.AlbumsIDs) ([]model.Album, error) {
	ret := _m.Called(accessToken, market, albumsIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbums")
	}

	var r0 []model.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.AlbumsIDs) ([]model.Album, error)); ok {
		return rf(accessToken, market, albumsIDs)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.AlbumsIDs) []model.Album); ok {
		r0 = rf(accessToken, market, albumsIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.AvailableMarket, model.AlbumsIDs) error); ok {
		r1 = rf(accessToken, market, albumsIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewReleases provides a mock function with given fields: accessToken, limit, offset
func (_m *AlbumsResource) GetNewReleases(accessToken model.AccessToken, limit *model.Limit, offset *model.Offset) (model.AlbumsNewRelease, error) {
	ret := _m.Called(accessToken, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNewReleases")
	}

	var r0 model.AlbumsNewRelease
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.Limit, *model.Offset) (model.AlbumsNewRelease, error)); ok {
		return rf(accessToken, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.Limit, *model.Offset) model.AlbumsNewRelease); ok {
		r0 = rf(accessToken, limit, offset)
	} else {
		r0 = ret.Get(0).(model.AlbumsNewRelease)
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.Limit, *model.Offset) error); ok {
		r1 = rf(accessToken, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlbumsResource creates a new instance of AlbumsResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumsResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumsResource {
	mock := &AlbumsResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
