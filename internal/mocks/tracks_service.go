// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// TracksService is an autogenerated mock type for the TracksService type
type TracksService struct {
	mock.Mock
}

// GetTrack provides a mock function with given fields: countryMarketName, trackID
func (_m *TracksService) GetTrack(countryMarketName *string, trackID string) (model.Track, error) {
	ret := _m.Called(countryMarketName, trackID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrack")
	}

	var r0 model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, string) (model.Track, error)); ok {
		return rf(countryMarketName, trackID)
	}
	if rf, ok := ret.Get(0).(func(*string, string) model.Track); ok {
		r0 = rf(countryMarketName, trackID)
	} else {
		r0 = ret.Get(0).(model.Track)
	}

	if rf, ok := ret.Get(1).(func(*string, string) error); ok {
		r1 = rf(countryMarketName, trackID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTracks provides a mock function with given fields: countryMarketName, tracksIDs
func (_m *TracksService) GetTracks(countryMarketName *string, tracksIDs ...string) ([]model.Track, error) {
	_va := make([]interface{}, len(tracksIDs))
	for _i := range tracksIDs {
		_va[_i] = tracksIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, countryMarketName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTracks")
	}

	var r0 []model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, ...string) ([]model.Track, error)); ok {
		return rf(countryMarketName, tracksIDs...)
	}
	if rf, ok := ret.Get(0).(func(*string, ...string) []model.Track); ok {
		r0 = rf(countryMarketName, tracksIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, ...string) error); ok {
		r1 = rf(countryMarketName, tracksIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTracksService creates a new instance of TracksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TracksService {
	mock := &TracksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
