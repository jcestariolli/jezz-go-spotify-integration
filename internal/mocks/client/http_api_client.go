// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// HTTPApiClient is an autogenerated mock type for the HTTPApiClient type
type HTTPApiClient struct {
	mock.Mock
}

// DoRequest provides a mock function with given fields: method, url, queryParams, contentType, accessToken, responseTypedOutput
func (_m *HTTPApiClient) DoRequest(method model.HTTPMethod, url string, queryParams *model.QueryParams, contentType string, accessToken *model.AccessToken, responseTypedOutput interface{}) error {
	ret := _m.Called(method, url, queryParams, contentType, accessToken, responseTypedOutput)

	if len(ret) == 0 {
		panic("no return value specified for DoRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.HTTPMethod, string, *model.QueryParams, string, *model.AccessToken, interface{}) error); ok {
		r0 = rf(method, url, queryParams, contentType, accessToken, responseTypedOutput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHTTPApiClient creates a new instance of HTTPApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPApiClient {
	mock := &HTTPApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
