// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// AlbumsService is an autogenerated mock type for the AlbumsService type
type AlbumsService struct {
	mock.Mock
}

// GetAlbum provides a mock function with given fields: countryMarketName, albumId
func (_m *AlbumsService) GetAlbum(countryMarketName *string, albumId string) (model.Album, error) {
	ret := _m.Called(countryMarketName, albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbum")
	}

	var r0 model.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, string) (model.Album, error)); ok {
		return rf(countryMarketName, albumId)
	}
	if rf, ok := ret.Get(0).(func(*string, string) model.Album); ok {
		r0 = rf(countryMarketName, albumId)
	} else {
		r0 = ret.Get(0).(model.Album)
	}

	if rf, ok := ret.Get(1).(func(*string, string) error); ok {
		r1 = rf(countryMarketName, albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbumTracks provides a mock function with given fields: countryMarketName, limit, offset, albumId
func (_m *AlbumsService) GetAlbumTracks(countryMarketName *string, limit *int, offset *int, albumId string) (model.SimplifiedTracksPaginated, error) {
	ret := _m.Called(countryMarketName, limit, offset, albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumTracks")
	}

	var r0 model.SimplifiedTracksPaginated
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *int, *int, string) (model.SimplifiedTracksPaginated, error)); ok {
		return rf(countryMarketName, limit, offset, albumId)
	}
	if rf, ok := ret.Get(0).(func(*string, *int, *int, string) model.SimplifiedTracksPaginated); ok {
		r0 = rf(countryMarketName, limit, offset, albumId)
	} else {
		r0 = ret.Get(0).(model.SimplifiedTracksPaginated)
	}

	if rf, ok := ret.Get(1).(func(*string, *int, *int, string) error); ok {
		r1 = rf(countryMarketName, limit, offset, albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbums provides a mock function with given fields: countryMarketName, albumsIds
func (_m *AlbumsService) GetAlbums(countryMarketName *string, albumsIds ...string) ([]model.Album, error) {
	_va := make([]interface{}, len(albumsIds))
	for _i := range albumsIds {
		_va[_i] = albumsIds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, countryMarketName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbums")
	}

	var r0 []model.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, ...string) ([]model.Album, error)); ok {
		return rf(countryMarketName, albumsIds...)
	}
	if rf, ok := ret.Get(0).(func(*string, ...string) []model.Album); ok {
		r0 = rf(countryMarketName, albumsIds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, ...string) error); ok {
		r1 = rf(countryMarketName, albumsIds...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewReleases provides a mock function with given fields: limit, offset
func (_m *AlbumsService) GetNewReleases(limit *int, offset *int) (model.AlbumsNewRelease, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetNewReleases")
	}

	var r0 model.AlbumsNewRelease
	var r1 error
	if rf, ok := ret.Get(0).(func(*int, *int) (model.AlbumsNewRelease, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*int, *int) model.AlbumsNewRelease); ok {
		r0 = rf(limit, offset)
	} else {
		r0 = ret.Get(0).(model.AlbumsNewRelease)
	}

	if rf, ok := ret.Get(1).(func(*int, *int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlbumsService creates a new instance of AlbumsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumsService {
	mock := &AlbumsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
