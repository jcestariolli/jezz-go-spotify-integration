// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "jezz-go-spotify-integration/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ArtistsResource is an autogenerated mock type for the ArtistsResource type
type ArtistsResource struct {
	mock.Mock
}

// GetArtist provides a mock function with given fields: accessToken, artistId
func (_m *ArtistsResource) GetArtist(accessToken model.AccessToken, artistId model.Id) (model.Artist, error) {
	ret := _m.Called(accessToken, artistId)

	if len(ret) == 0 {
		panic("no return value specified for GetArtist")
	}

	var r0 model.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, model.Id) (model.Artist, error)); ok {
		return rf(accessToken, artistId)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, model.Id) model.Artist); ok {
		r0 = rf(accessToken, artistId)
	} else {
		r0 = ret.Get(0).(model.Artist)
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, model.Id) error); ok {
		r1 = rf(accessToken, artistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtistAlbums provides a mock function with given fields: accessToken, includeGroups, market, limit, offset, artistId
func (_m *ArtistsResource) GetArtistAlbums(accessToken model.AccessToken, includeGroups *model.AlbumGroups, market *model.AvailableMarket, limit *model.Limit, offset *model.Offset, artistId model.Id) (model.SimplifiedArtistAlbumsPaginated, error) {
	ret := _m.Called(accessToken, includeGroups, market, limit, offset, artistId)

	if len(ret) == 0 {
		panic("no return value specified for GetArtistAlbums")
	}

	var r0 model.SimplifiedArtistAlbumsPaginated
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AlbumGroups, *model.AvailableMarket, *model.Limit, *model.Offset, model.Id) (model.SimplifiedArtistAlbumsPaginated, error)); ok {
		return rf(accessToken, includeGroups, market, limit, offset, artistId)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AlbumGroups, *model.AvailableMarket, *model.Limit, *model.Offset, model.Id) model.SimplifiedArtistAlbumsPaginated); ok {
		r0 = rf(accessToken, includeGroups, market, limit, offset, artistId)
	} else {
		r0 = ret.Get(0).(model.SimplifiedArtistAlbumsPaginated)
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.AlbumGroups, *model.AvailableMarket, *model.Limit, *model.Offset, model.Id) error); ok {
		r1 = rf(accessToken, includeGroups, market, limit, offset, artistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtistTopTracks provides a mock function with given fields: accessToken, market, artistId
func (_m *ArtistsResource) GetArtistTopTracks(accessToken model.AccessToken, market *model.AvailableMarket, artistId model.Id) ([]model.Track, error) {
	ret := _m.Called(accessToken, market, artistId)

	if len(ret) == 0 {
		panic("no return value specified for GetArtistTopTracks")
	}

	var r0 []model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.Id) ([]model.Track, error)); ok {
		return rf(accessToken, market, artistId)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, *model.AvailableMarket, model.Id) []model.Track); ok {
		r0 = rf(accessToken, market, artistId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, *model.AvailableMarket, model.Id) error); ok {
		r1 = rf(accessToken, market, artistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtists provides a mock function with given fields: accessToken, artistsIds
func (_m *ArtistsResource) GetArtists(accessToken model.AccessToken, artistsIds model.ArtistsIds) ([]model.Artist, error) {
	ret := _m.Called(accessToken, artistsIds)

	if len(ret) == 0 {
		panic("no return value specified for GetArtists")
	}

	var r0 []model.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AccessToken, model.ArtistsIds) ([]model.Artist, error)); ok {
		return rf(accessToken, artistsIds)
	}
	if rf, ok := ret.Get(0).(func(model.AccessToken, model.ArtistsIds) []model.Artist); ok {
		r0 = rf(accessToken, artistsIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AccessToken, model.ArtistsIds) error); ok {
		r1 = rf(accessToken, artistsIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArtistsResource creates a new instance of ArtistsResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtistsResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtistsResource {
	mock := &ArtistsResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
