# .github/actions/test-coverage-go/action.yml
name: 'Go Test Coverage'
description: 'Runs Go test coverage, uploads artifacts, and posts PR comments.'

inputs:
  go_version:
    description: 'The Go version to use for build and test'
    required: true
  run_id:
    description: 'The ID of the current workflow run'
    required: true
  repository:
    description: 'The GitHub repository'
    required: true
  server_url:
    description: 'The GitHub server URL'
    required: true
  event_name:
    description: 'The name of the event that triggered the workflow'
    required: true
  min_coverage_percentage:
    description: 'Minimum required test coverage percentage for the action to pass'
    required: false
    default: '0'

runs:
  using: "composite"
  steps:
    - name: Validate Test Coverage
      shell: bash
      run: make test-coverage-detailed

    - name: Upload Test Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./coverage_detailed.txt

    - name: Generate HTML Test Coverage
      shell: bash
      run: make test-coverage-html

    - name: Upload HTML Test Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: html-code-coverage-report
        path: ./coverage.html

    - name: Download Test Coverage Report
      uses: actions/download-artifact@v4
      with:
        name: code-coverage-report
        path: ./

    - name: Extract Total Test Coverage and Check Threshold
      id: extract_and_check_coverage
      if: ${{ inputs.event_name == 'pull_request' }}
      shell: bash
      run: |
        TOTAL_COVERAGE_RAW=$(tail -n 1 coverage_detailed.txt | awk '{print $NF}')
        TOTAL_COVERAGE_PERCENT=${TOTAL_COVERAGE_RAW%?}
        MIN_COVERAGE_PERCENTAGE=${{ inputs.min_coverage_percentage }}

        echo "Total coverage raw: $TOTAL_COVERAGE_RAW"
        echo "Total coverage numeric: $TOTAL_COVERAGE_PERCENT"
        echo "Minimum required coverage: $MIN_COVERAGE_PERCENTAGE"

        # Determine comment header and status
        COMMENT_HEADER="### ✅ Go Tests Coverage Succeeded"
        FAILURE_MESSAGE=""
        COVERAGE_PASSED="true"

        if (( $(echo "$TOTAL_COVERAGE_PERCENT < $MIN_COVERAGE_PERCENTAGE" | bc -l) )); then
          COMMENT_HEADER="### ❌ Go Tests Coverage FAILED!"
          FAILURE_MESSAGE="#### 🚨 Coverage Alert: Your code coverage is below the required **${MIN_COVERAGE_PERCENTAGE}%**. Please increase test coverage before merging."
          COVERAGE_PASSED="false"
          echo "::error title=Test Coverage Below Threshold::Test coverage (${TOTAL_COVERAGE_RAW}) is below the required minimum (${MIN_COVERAGE_PERCENTAGE}%)."
        fi

        echo "total_coverage=$TOTAL_COVERAGE_RAW" >> $GITHUB_OUTPUT
        echo "coverage_comment_header=$COMMENT_HEADER" >> $GITHUB_OUTPUT
        echo "failure_message=$FAILURE_MESSAGE" >> $GITHUB_OUTPUT
        echo "coverage_passed=$COVERAGE_PASSED" >> $GITHUB_OUTPUT

    - name: Read Test Coverage Details
      id: read_coverage
      if: ${{ inputs.event_name == 'pull_request' }}
      shell: bash
      run: |
        COVERAGE_CONTENT=$(cat coverage_detailed.txt)
        echo "coverage_details<<EOF" >> $GITHUB_OUTPUT
        echo "$COVERAGE_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Post Test Coverage as PR Comment
      if: ${{ inputs.event_name == 'pull_request' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: 'true'
        header: "go-test-coverage"
        message: |
          ${{ steps.extract_and_check_coverage.outputs.coverage_comment_header }}
          ${{ steps.extract_and_check_coverage.outputs.failure_message }}
          #### 🧪 _Total Coverage:_ **${{ steps.extract_and_check_coverage.outputs.total_coverage }}**
          <details>
          <summary>Click to view detailed coverage report</summary>
          
          ```
          ${{ steps.read_coverage.outputs.coverage_details }}
          ```
          
          </details>
          
          ---
          
          🔗[View tests coverage artifacts here](${{ inputs.server_url }}/${{ inputs.repository }}/actions/runs/${{ inputs.run_id }})

    - name: Fail if Test Coverage is Below Threshold
      if: ${{ inputs.event_name == 'pull_request' && steps.extract_and_check_coverage.outputs.coverage_passed == 'false' }}
      shell: bash
      run: |
          echo "Test coverage is below the required minimum. Failing the job."
          exit 1 

    - name: Clean up
      shell: bash
      run: make clean
