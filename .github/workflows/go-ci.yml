# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go CI

on:
  workflow_call:
    inputs:
      go_version:
        description: 'The Go version to use for build and test'
        required: true
        type: string

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-go-project
        with:
          go-version: ${{ inputs.go_version }}

      - name: Lint
        run: make lint

      - name: Clean up
        run: make clean

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-go-project
        with:
          go-version: ${{ inputs.go_version }}

      - name: Build
        run: make build

      - name: Clean up
        run: make clean

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-go-project
        with:
          go-version: ${{ inputs.go_version }}

      - name: Run Tests
        run: make test

      - name: Clean up
        run: make clean

  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-go-project
        with:
          go-version: ${{ inputs.go_version }}

      - name: Validate Test Coverage
        run: make test-coverage-detailed

      - name: Upload Test Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage_detailed.txt

      - name: Generate HTML Test Coverage
        run: make test-coverage-html

      - name: Upload HTML Test Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: html-code-coverage-report
          path: ./coverage.html

      - name: Download Test Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report
          path: ./

      - name: Extract Total Test Coverage
        id: extract_total_coverage
        if: github.event_name == 'pull_request'
        run: |
          TOTAL_COVERAGE=$(tail -n 1 coverage_detailed.txt | awk '{print $NF}')
          echo "total_coverage=$TOTAL_COVERAGE" >> $GITHUB_OUTPUT

      - name: Read Test Coverage Details
        id: read_coverage
        if: github.event_name == 'pull_request'
        run: |
          COVERAGE_CONTENT=$(cat coverage_detailed.txt)
          echo "coverage_details<<EOF" >> $GITHUB_OUTPUT
          echo "$COVERAGE_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Test Coverage as PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: 'true'
          header: "go-test-coverage"
          message: |
            ### ðŸ“Š Go Test Coverage Details
            **Total Coverage: ${{ steps.extract_total_coverage.outputs.total_coverage }}**
            <details>
            <summary>Click to view detailed coverage report</summary>
            
            ```
            ${{ steps.read_coverage.outputs.coverage_details }}
            ```
            
            </details>
            ---
            
            [View coverage artifacts here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Clean up
        run: make clean
